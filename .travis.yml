# Push and pr builds can be disabled via project settings
language: shell
dist: xenial
services: docker

env:
  global:
    - BUILD_DIR="build/"
    - UPDATE_DIR="update/"

script:
  - |
    set +e
    hostname
    whoami
    cat /etc/*release
    lscpu
    free
    df -h
    pwd
    docker info
    docker version

    # Terminate the build on errors
    set -e

    # Process variables
    PIPELINE="${TRAVIS_BRANCH}"
    if [ "${APPID}" = 90 ]; then
        REPOSITORY="${REGISTRY_GOLDSOURCE}/${GAME}"
        GAME_ENGINE="hlds"
        GAME_BIN="hlds_linux"
    else
        REPOSITORY="${REGISTRY_SOURCE}/${GAME}"
        GAME_ENGINE="srcds"
        GAME_BIN="srcds_linux"
    fi

    echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin

    # Build / Update the game image
    if [ "${PIPELINE}" = 'build' ]; then
        GAME_IMAGE="${REPOSITORY}:${GAME_VERSION}"
        if [ "${CACHE}" = 'true' ]; then
            date
            time docker pull "${GAME_IMAGE}" || true
        fi
        date
        travis_wait 40 time docker build \
            --cache-from "${GAME_IMAGE}" \
            --build-arg APPID="${APPID}" \
            --build-arg MOD="${MOD}" \
            --build-arg FIX_APPMANIFEST="${FIX_APPMANIFEST}" \
            --build-arg CLIENT_APPID="${CLIENT_APPID}" \
            -t "${GAME_IMAGE}" \
            --label "appid=${APPID}" \
            --label "mod=${MOD}" \
            --label "client_appid=${CLIENT_APPID}" \
            --label "game=${GAME}" \
            --label "game_version=${GAME_VERSION}" \
            --label "game_update_count=0" \
            --label "game_engine=${GAME_ENGINE}" \
            "${BUILD_DIR}"
        if [ "${LATEST}" = 'true' ]; then
            docker tag "${GAME_IMAGE}" "${REPOSITORY}:latest"
        fi
        date
    elif [ "${PIPELINE}" = 'update' ]; then
        GAME_IMAGE="${REPOSITORY}:latest"
        date
        travis_wait 40 time docker pull "${GAME_IMAGE}"
        date
        travis_wait 40 time docker build \
        --build-arg GAME_IMAGE="${GAME_IMAGE}" \
        -t "${GAME_IMAGE}" \
        --label "game_version=${GAME_VERSION}" \
        --label "game_update_count=${GAME_UPDATE_COUNT}" \
        "${UPDATE_DIR}"
        docker tag "${GAME_IMAGE}" "${REPOSITORY}:${GAME_VERSION}-layered"
        date
    fi
    docker images
    docker inspect "${GAME_IMAGE}"
    docker history "${GAME_IMAGE}"

    # Test the game image
    if [ ! "${NO_TEST}" = 'true' ]; then
        date
        time docker run \
            -t \
            --rm \
            "${GAME_IMAGE}" \
            "printenv && echo && ls -al && echo && exec ${GAME_BIN} -game ${GAME} +version +exit" | tee /tmp/test
        echo; date
    fi
    # Verify game version of the game image matches the value of GAME_VERSION
    GAME_IMAGE_VERSION_LINES=$( cat /tmp/test | grep -iE '\bexe\b|version' | sed 's/[^0-9]//g' )
    if ! echo "$GAME_IMAGE_VERSION_LINES" | grep -E "^$GAME_VERSION" > /dev/null; then
        echo "Game version does not match GAME_VERSION=$GAME_VERSION"
        echo "GAME_IMAGE_VERSION_LINES:"
        echo "$GAME_IMAGE_VERSION_LINES"
        exit 1
    fi
    rm -f /tmp/test

    # Push the game image
    if [ ! "${NO_PUSH}" = 'true' ]; then
        date
        time docker push "${GAME_IMAGE}"
        if [ "${PIPELINE}" = 'build' ]; then
            if [ "${LATEST}" = 'true' ]; then
                time docker push "${REPOSITORY}:latest"
            fi
        elif [ "${PIPELINE}" = 'update' ]; then
            time docker push "${REPOSITORY}:${GAME_VERSION}-layered"
        fi
        date
    fi
after_script:
  - |
    docker logout
